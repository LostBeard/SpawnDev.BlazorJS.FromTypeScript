@inherits LayoutComponentBase

<PageTitle>@Title</PageTitle>

<HeadContent>
    <RadzenThemeContainer Theme="material-dark" />
    <link href="css/app-run.css" rel="stylesheet" />
    <link href="SpawnDev.BlazorJS.FromTypeScript.styles.css" rel="stylesheet" />
</HeadContent>
<div>
    <RadzenComponents />
    <RadzenLayout Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-right-sidebar'">
        <RadzenHeader>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0" JustifyContent="JustifyContent.Left">
                    <RadzenSidebarToggle Style="margin: 0 0.5rem 0 0;" Click="@(() => leftSidebarExpanded = !leftSidebarExpanded)" />
                    <RadzenMenu Responsive=false>
                        <RadzenMenuItem Disabled="@_busy" Text="File">
                            <RadzenMenuItem Click="ImportTypeScriptDeclarations" Icon="file_open" Text="Import *.d.ts Zip" />
                            <RadzenMenuItem Click="Reset" Icon="close" Text="Reset" />
                        </RadzenMenuItem>
                    </RadzenMenu>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0" JustifyContent="JustifyContent.Right">
                    <AppTrayArea></AppTrayArea>
                    <RadzenSidebarToggle Style="@($"margin: 0; {(rightSidebarEnabled ? "" : "display: none;")}")" Click="@(() => rightSidebarExpanded = !rightSidebarExpanded)" />
                </RadzenStack>
            </RadzenStack>
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@leftSidebarExpanded" Responsive="true">
            <RadzenPanelMenu Style="height: 100%; width: 100%;">
                <RadzenTree Change="Tree_OnChange" @ref=tree ItemContextMenu="TreeItem_OnContextMenu" Data=@categories Expand=@OnExpand Style="height: 100%; width: 100%;">
                    <RadzenTreeLevel Selected=@ShouldSelectThisNode Expanded=@ShouldExpandThisNode Text="@GetTextForNode" HasChildren="@HasChildren" Template="@RenderTreeItem" />
                </RadzenTree>
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody Style="width: auto; position: relative; padding: 0;">
            <ProgressModal />
            <RadzenTabs Change="Tabs_OnChange" Style="height: 100%; width: 100%;" @ref="tabs" RenderMode="TabRenderMode.Client" @bind-SelectedIndex=@selectedIndex>
                <Tabs>
                    @{
                        while (Editors.Count > 0 && Editors.Last().Closed)
                        {
                            Console.WriteLine("Removing closed editor");
                            Editors.RemoveAt(Editors.Count - 1);
                        }
                    }
                    @foreach (var editorItem in Editors)
                    {
                        var tabText = editorItem.TabText;
                        var fullPath = editorItem.FullPath;
                        var style = "";
                        if (editorItem.Closed)
                        {
                            style += "display: none;";
                        }
                        <RadzenTabsItem @key=@editorItem.InstanceId Style="@style">
                            <Template>
                                <div style="display: flex; gap: 6px">
                                    <img src="@FileIconService.GetFileImage(fullPath)" style="width: 20px; height: 20px;" />
                                    <span>@tabText</span>
                                    <RadzenButton class="editor-close-tab-button" Variant="Variant.Outlined" Icon="close" @onclick:stopPropagation Click=@(() => CloseEntry(fullPath)) Size="ButtonSize.ExtraSmall" />
                                </div>
                            </Template>
                            <ChildContent>
                                <div style="height: 100%; width: 100%; font-weight: bold;">
                                    <OpenFileView FullPath="@fullPath" />
                                </div>
                            </ChildContent>
                        </RadzenTabsItem>
                    }
                </Tabs>
            </RadzenTabs>
        </RadzenBody>
        <RadzenSidebar Responsive="false" @bind-Expanded="@rightSidebarExpanded" Style="grid-area: rz-right-sidebar">
            <div class="rz-p-4">
                <!-- Right Sidebar -->
            </div>
        </RadzenSidebar>
    </RadzenLayout>

</div>
@code {

    RadzenTree? tree = null;
    List<ASyncFSEntryInfo> categories = new List<ASyncFSEntryInfo>
    {
        new ASyncFSEntryInfo(true, "", ""),
    };


    private RenderFragment RenderTreeItem(RadzenTreeItem args) => builder =>
    {
        if (args.Value is ASyncFSEntryInfo fsEntry)
        {
            var i = 0;
            var entryName = string.IsNullOrEmpty(fsEntry.Name) ? "- Root -" : fsEntry.Name;
            bool isDirectory = fsEntry.IsDirectory;
            var icon = isDirectory ? "folder" : "insert_drive_file";
            builder.OpenElement(++i, "button"); // <button
            builder.AddAttribute(++i, "class", "tree-workspace-item workspace-item");
            builder.AddAttribute(++i, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, (mouseArgs) => TreeviewItemClick(mouseArgs, args)));
            var image = FileIconService.GetPathImage(fsEntry);
            if (!string.IsNullOrEmpty(image))
            {
                builder.OpenComponent<RadzenImage>(++i);    // <RadzenImage
                builder.AddAttribute(++i, nameof(RadzenImage.Path), image);
                builder.AddAttribute(++i, nameof(RadzenImage.Style), "width: 22px; height: 22px; margin-right: 0.3rem;");
                builder.CloseComponent();                   // </RadzenImage>
            }
            else
            {
                builder.OpenComponent<RadzenIcon>(++i); // <RadzenIcon
                builder.AddAttribute(++i, nameof(RadzenIcon.Icon), icon);
                builder.AddAttribute(++i, nameof(RadzenIcon.Style), "width: 22px; height: 22px; margin-right: 0.3rem;");
                builder.CloseComponent();   // </RadzenIcon>
            }
            builder.AddContent(++i, entryName);
            builder.CloseElement();     // </button>
        }
        else
        {
            throw new NotImplementedException();
        }
    };
    bool HasChildren(object args)
    {
        if (args is ASyncFSEntryInfo fsEntry) return fsEntry.IsDirectory;
        return false;
    }
    string GetTextForNode(object data)
    {
        if (data is ASyncFSEntryInfo fsEntry)
        {
            var category = fsEntry;
            bool isDirectory = category.IsDirectory;
            return category.Name;
        }
        else
        {
            var nmt = true;
        }
        return "???";
    }
}